package com.longxi.www.Thread.t2.P_and_C;
/*
生产者消费者

经典的多线程协作模式，实际上主要是是包含了两类线程
    一类是生产者线程用于生产数据
    一类是消费者线程用于消费数据

为了解耦生产者和消费者的关系，通常会使用共享的数据区域，就像一个仓库
    生产者生产数据后直接放置在共享数据区中，并不需要关心消费者的行为
    消费者只需要从共享数据区中获取数据，并不需要关心生产者的行为

           生产者--->共享数据区域<---消费者


案例
奶箱类(Box):定义一个成员变量，表示第x瓶奶，提供存储牛奶和获取牛奶的操作
生产者类(Producer):实现Runnable接口，重写run()方法，调用存储牛奶的操作
消费者类(Customer):实现Runnable接口，重写run()方法，调用获取牛奶的操作
测试类(BoxDemo):里面有main方法，main方法中的代码步骤如下
    1.创建奶箱对象，这是共享数据区域
    2.创建生产者对象，把奶香对象作为构造方法参数传递，因为在这个类中要调用存储牛奶的操作
    3.创建消费者对象，把奶箱对象作为构造方法参数传递，因为在这个类中要调用获取牛奶的操作
    4.创建两个线程对象，分别把生产者对象和消费者对象作为构造方法参数构造
    5.启动线程
 */
public class BoxDemo {
    public static void main(String[] args) {
        //1.创建奶箱对象，这是共享数据区域
        Box b = new Box();
        //2.创建生产者对象，把奶香对象作为构造方法参数传递，因为在这个类中要调用存储牛奶的操作
        Producer p = new Producer(b);
        //3.创建消费者对象，把奶箱对象作为构造方法参数传递，因为在这个类中要调用获取牛奶的操作
        Customer c = new Customer(b);
        //4.创建两个线程对象，分别把生产者对象和消费者对象作为构造方法参数构造
        Thread t1 = new Thread(p);
        Thread t2 = new Thread(c);
        //5.启动线程
        t1.start();
        t2.start();

        /*
        送奶工将第1瓶奶放入奶箱
        用户拿到第1瓶奶
        送奶工将第2瓶奶放入奶箱
        用户拿到第2瓶奶
        送奶工将第3瓶奶放入奶箱
        用户拿到第3瓶奶
        送奶工将第4瓶奶放入奶箱
        用户拿到第4瓶奶
        送奶工将第5瓶奶放入奶箱
        用户拿到第5瓶奶
         */
    }
}
